(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{213:function(e,a,t){"use strict";t.r(a);var s=t(0),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"üçï-introduction"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#üçï-introduction"}},[e._v("#")]),e._v(" üçï Introduction")]),e._v(" "),t("p",[e._v("From GraphQL "),t("a",{attrs:{href:"https://graphql.org/learn/",target:"_blank",rel:"noopener noreferrer"}},[e._v("website"),t("OutboundLink")],1)]),e._v(" "),t("blockquote",[t("p",[e._v("GraphQL is a query language for your API, and a server-side runtime for executing queries by using a type system you define for your data. GraphQL isn't tied to any specific database or storage engine and is instead backed by your existing code and data.")])]),e._v(" "),t("p",[e._v("Doesn't that sound awesome?")]),e._v(" "),t("blockquote",[t("p",[e._v("English please!")])]),e._v(" "),t("p",[e._v("With GraphQL you can define a so called GraphQL server on which you can pose queries. You can also consume GraphQL from a client with a simple POST request or use component built for the purpose from vendors like Apollo or Prisma")]),e._v(" "),t("blockquote",[t("p",[e._v("Why would I want all that?")])]),e._v(" "),t("p",[e._v("One word "),t("em",[e._v("content-negotiation")])]),e._v(" "),t("blockquote",[t("p",[e._v("Ok, please explain")])]),e._v(" "),t("p",[e._v("With GraphQL you are able to ask for exactly the data you want at almost any depth you want.")]),e._v(" "),t("p",[t("strong",[e._v("Let's take an example")])]),e._v(" "),t("p",[e._v("Imagine having a normal REST API and you want all the "),t("code",[e._v("orders")]),e._v(", "),t("code",[e._v("order items")]),e._v(" and what "),t("code",[e._v("products")]),e._v(" were ordered using "),t("code",[e._v("order_id")]),e._v(" then you would probably pose queries like this:")]),e._v(" "),t("p",[e._v("To get informations about an order,")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("order-api/orders/{order_id}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("To get the order items, you would have to call something like this:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("order-api/order-items/{order_id}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("To know what products someone bought, you would have to do this")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("order-api/order-items/{order_id}/product\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br")])]),t("p",[e._v("The exact implementation may vary but the point is that it is more than one REST request for all the data you need to present at a page. You could obviously solve that and build specific REST endpoints that builds that particular view.")]),e._v(" "),t("p",[e._v("OR you use GraphQL and all you have to type is this:")]),e._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("orders {\n  created,\n  who {\n    name\n  },\n  items {\n    price,\n    quantity\n    product {\n      name\n    }\n  }\n}\n")])]),e._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[e._v("1")]),t("br"),t("span",{staticClass:"line-number"},[e._v("2")]),t("br"),t("span",{staticClass:"line-number"},[e._v("3")]),t("br"),t("span",{staticClass:"line-number"},[e._v("4")]),t("br"),t("span",{staticClass:"line-number"},[e._v("5")]),t("br"),t("span",{staticClass:"line-number"},[e._v("6")]),t("br"),t("span",{staticClass:"line-number"},[e._v("7")]),t("br"),t("span",{staticClass:"line-number"},[e._v("8")]),t("br"),t("span",{staticClass:"line-number"},[e._v("9")]),t("br"),t("span",{staticClass:"line-number"},[e._v("10")]),t("br"),t("span",{staticClass:"line-number"},[e._v("11")]),t("br"),t("span",{staticClass:"line-number"},[e._v("12")]),t("br"),t("span",{staticClass:"line-number"},[e._v("13")]),t("br")])]),t("p",[e._v("Impressed yet?")]),e._v(" "),t("h2",{attrs:{id:"what-we-will-build"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#what-we-will-build"}},[e._v("#")]),e._v(" What we will build")]),e._v(" "),t("p",[e._v("This is a quite ambitious workshop. We will teach you to not only build and consume a GraphQL workshop but we will also teach you how microservices might fit in the mix and in doing so learn some Docker basics.")]),e._v(" "),t("p",[e._v("We are not happy there. We want you to be able to learn some basics on Cloud and hosting. So for that we will look at something really amazing namely Serverless. Serverless as a concept means you don't have to focus on VMs or Web servers but just CODE. Sounds great right?")]),e._v(" "),t("p",[e._v("What we will do is to take our GraphQL API, put it in a Serverless function and with a few click place that and our microservices in the Cloud and "),t("em",[e._v("voila")]),e._v(", the whole world is ready to use your creation.")]),e._v(" "),t("p",[e._v("So that's")]),e._v(" "),t("p",[e._v("API:")]),e._v(" "),t("ul",[t("li",[e._v("A GraphQL API")]),e._v(" "),t("li",[e._v("A couple of Microservices supporting our API")]),e._v(" "),t("li",[e._v("A serverless function")])]),e._v(" "),t("p",[e._v("Hosting")]),e._v(" "),t("ul",[t("li",[e._v("the CLOUD")])])])}),[],!1,null,null,null);a.default=r.exports}}]);